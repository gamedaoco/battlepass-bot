services:

#
# DATABASES
#

  db:
    image: postgres:12-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - .tmp/postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: [CMD-SHELL, pg_isready, -U, postgres]
      interval: 5s
      timeout: 5s
      retries: 5

  db-admin:
    image: dpage/pgadmin4
    restart: always
    ports:
      - 8082:80
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@battlepass.app
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - .tmp/postgres-admin:/var/lib/pgadmin
    depends_on:
      - db

  redis:
    image: redis:7-alpine
    ports:
      - 6379:6379
    command: redis-server --save 60 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - .tmp/redis/data:/data
      - .tmp/redis/redis:/var/lib/redis
      - .tmp/redis/config:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: [ CMD, redis-cli, --raw, incr, ping ]

  redis-admin:
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      REDIS_HOSTS: redis
      REDIS_HOST: redis
      REDIS_PORT: redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    ports:
      - 8081:8081
    depends_on:
      - redis

#
# CORE SERVICES
#

  graph:
    restart: always
    image: ${DOCKER_IMAGE}
    command:
      - npm
      - run-script
      - graph
    environment:
      LOGGING_LEVEL: ${LOGGING_LEVEL}
      DATABASE_URL: ${DATABASE_URL}
      API_PORT:  ${API_PORT}
      API_SECRET_KEY: ${API_SECRET_KEY}
      API_GRAPHQL_UI: ${API_GRAPHQL_UI}
      API_SECURITY_TOKEN: ${API_SECURITY_TOKEN}
    links:
      - db
      - redis
    ports:
      - 8080:8080
    depends_on:
      - db

  # chain:
  #   restart: always
  #   image: ${DOCKER_IMAGE}
  #   command:
  #     - npm
  #     - run-script
  #     - chain
  #   environment:
  #     LOGGING_LEVEL: ${LOGGING_LEVEL}
  #     DATABASE_URL: ${DATABASE_URL}
  #     GRAPH_URL: ${GRAPH_URL}
  #     CHAIN_RPC_URL: ${CHAIN_RPC_URL}
  #     CHAIN_ACCOUNT: ${CHAIN_ACCOUNT}
  #     REDIS_HOST: ${REDIS_HOST}
  #     REDIS_PORT: ${REDIS_PORT}
  #   links:
  #     - db
  #     - redis
  #   depends_on:
  #     - db
  #     - api

  # service:
  #   restart: always
  #   image: ${DOCKER_IMAGE}
  #   command:
  #     - npm
  #     - run-script
  #     - service
  #   environment:
  #     LOGGING_LEVEL: ${LOGGING_LEVEL}
  #     DATABASE_URL: ${DATABASE_URL}
  #   links:
  #     - db
  #   depends_on:
  #     - db
  #     - api

#
# AGGREGATOR SERVICES
#

  # discord:
  #   restart: always
  #   image: ${DOCKER_IMAGE}
  #   command:
  #     - npm
  #     - run-script
  #     - discord
  #   environment:
  #     LOGGING_LEVEL: ${LOGGING_LEVEL}
  #     DATABASE_URL: ${DATABASE_URL}
  #     DISCORD_BOT_KEY: ${DISCORD_BOT_KEY}
  #     DISCORD_FETCH_MESSAGES_SINCE: ${DISCORD_FETCH_MESSAGES_SINCE}
  #   links:
  #     - db
  #   depends_on:
  #     - db
  #     - api
  #     - redis

  # twitter:
  #   restart: always
  #   image: ${DOCKER_IMAGE}
  #   command:
  #     - npm
  #     - run-script
  #     - twitter
  #   environment:
  #     LOGGING_LEVEL: ${LOGGING_LEVEL}
  #     DATABASE_URL: ${DATABASE_URL}
  #     TWITTER_BEARER_TOKEN: ${TWITTER_BEARER_TOKEN}
  #   links:
  #     - db
  #   depends_on:
  #     - db
  #     - api
  #     - redis

  # epic-games:
  #   restart: always
  #   image: ${DOCKER_IMAGE}
  #   command:
  #     - npm
  #     - run-script
  #     - epicGames
  #   environment:
  #     LOGGING_LEVEL: ${LOGGING_LEVEL}
  #     DATABASE_URL: ${DATABASE_URL}
  #     EPIC_GAMES_DEPLOYMENT_ID: ${EPIC_GAMES_DEPLOYMENT_ID}
  #     EPIC_GAMES_CLIENT_ID: ${EPIC_GAMES_CLIENT_ID}
  #     EPIC_GAMES_CLIENT_SECRET: ${EPIC_GAMES_CLIENT_SECRET}
  #   links:
  #     - db
  #   depends_on:
  #     - db
  #     - api
  #     - redis

networks:
  default:
    name: supernet
    external: true
