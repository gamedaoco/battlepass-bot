enum Source {
	discord
	twitter
	gamedao
	epicGames
}

enum ActivityType {
	connect
	join
	post
	reaction
	tweet
	retweet
	follow
	comment
	like
	identity
}

enum SyncStatus {
	pending
	synced
	failed
}

enum MemberStatus {
	free
	pendingPayment
	pending
	synced
}

type BattlepassIdentity {
	id: Int!
	uuid: String!
	discord: String
	twitter: String
	epicGames: String
	address: String
	name: String
	email: String
	cid: String
	members: [BattlepassMember]
	progress: [BattlepassQuestProgress]
}

type BattlepassQuest {
	id: Int!
	battlepassId: Int!
	name: String
	description: String
	link: String
	cid: String
	repeat: Boolean!
	source: Source!
	type: ActivityType!
	guildId: String
	channelId: String
	hashtag: String
	twitterId: String
	quantity: Int!
	points: Int!
	max: Int
	maxDaily: Int
	battlepass: Battlepass!
	progresses: [BattlepassQuestProgress]
}

type BattlepassQuestProgress {
	id: Int!
	questId: Int!
	identityId: Int!
	progress: Float!
	quest: BattlepassQuest!
	identity: BattlepassIdentity!
}

type Battlepass {
	id: Int!
	chainId: String!
	name: String
	cid: String
	orgId: String!
	season: Int
	price: Int
	currency: String
	active: Boolean!
	finalized: Boolean!
	startDate: String
	endDate: String
	freePasses: Int!
	freeClaimed: Int!
	premiumPasses: Int
	premiumClaimed: Int!
	totalJoined: Int!
	joinable: Boolean!
	quests: [BattlepassQuest]
	members: [BattlepassMember]
	rewards: [BattlepassReward]
}

type BattlepassPoint {
	identityId: Int
	identityUuid: String
	battlepassId: Int!
	points: Int!
	quests: Int!
	identity: BattlepassIdentity!
	battlepass: Battlepass!
}

type BattlepassMember {
	id: Int
	identityId: Int!
	battlepassId: Int!
	premium: Boolean!
	status: MemberStatus!
	points: Int!
	passChainId: String
	progress: [BattlepassQuestProgress]
	battlepass: Battlepass!
	identity: BattlepassIdentity!
}

type BattlepassReward {
	id: Int!
	battlepassId: Int!
	name: String
	description: String
	cid: String
	chainId: String
	level: Int
	points: Int
	total: Int!
	available: Int!
	syncStatus: SyncStatus!
	battlepass: Battlepass!
}

type BattlepassRewardClaim {
	id: Int!
	nftId: Int
	syncStatus: SyncStatus!
	rewardId: Int!
	rewardChainId: String
	identityUuid: String!
	participantId: Int!
	reward: BattlepassReward!
	member: BattlepassMember!
}

type BattlepassLevel {
	id: Int!
	battlepassId: Int!
	name: String
	points: Int!
	totalPoints: Int!
	level: Int!
	syncStatus: SyncStatus!
	battlepass: Battlepass!
}

type Payment {
	battlepass: String!
	identityUuid: String!
	paymentToken: String!
	status: MemberStatus!
}

input BattlepassesFilter {
	id: Int
	chainId: String
	season: Int
	orgChainId: String
	active: Boolean
	finalized: Boolean
}

input QuestFilter {
	id: Int
	battlepassId: Int
	battlepassChainId: String
	source: String
	type: ActivityType
	repeat: Boolean
}

input MemberFilter {
	id: Int
	battlepassId: Int
	identityId: Int
	identityUuid: String
	premium: Boolean
}

input ProgressFilter {
	id: Int
	questId: Int
	identityId: Int
	identityUuid: String
	battlepassId: Int
	battlepassChainId: String
}

input IdentityFilter {
	id: Int
	uuid: String
	address: String
	discord: String
	twitter: String
}

input RewardClaimFilter {
	identityUuid: String
	battlepassChainId: String
}

input PointsFilter {
	identityId: Int
	identityUuid: String
	battlepassId: Int
	battlepassChainId: String
}

input RewardsFilter {
	id: Int
	battlepassId: Int
	battlepassChainId: String
}

input Level {
	level: Int!
	points: Int!
	name: String
}

input LevelsFilter {
	id: Int
	battlepassId: Int
	battlepassChainId: String
}

type Query {
	battlepasses(where: BattlepassesFilter): [Battlepass]
	members(where: MemberFilter): [BattlepassMember]
	progresses(where: ProgressFilter): [BattlepassQuestProgress]
	quests(where: QuestFilter): [BattlepassQuest]
	identities(where: IdentityFilter): [BattlepassIdentity]
	points(where: PointsFilter): [BattlepassPoint]
	rewards(where: RewardsFilter): [BattlepassReward]
	levels(where: LevelsFilter): [BattlepassLevel]
	reward_claims(where: RewardClaimFilter): [BattlepassRewardClaim]
}

type Mutation {
	identity(uuid: String, discord: String, twitter: String, address: String, name: String, email: String, cid: String): BattlepassIdentity
	join(battlepass: String!, identityUuid: String!): BattlepassMember
	joinPremium(battlepass: String!, identityUuid: String!): BattlepassMember
	quest(battlepass: String!, name: String, description: String, link: String, cid: String, daily: Boolean!, source: Source!, type: ActivityType!, guildId: String, channelId: String, hashtag: String, twitterId: String, quantity: Int!, points: Int!, max: Int, maxDaily: Int): BattlepassQuest
	reward(battlepass: String!, name: String, description: String, cid: String, points: Int, level: Int, total: Int!): BattlepassReward
	levels(battlepass: String!, levels: [Level]!): [BattlepassLevel]
	setFreePasses(battlepass: String!, freePasses: Int!): Battlepass
	processPayment(securityToken: String!, battlepass: String!, identityUuid: String!, paymentToken: String!): Payment
	claimReward(battlepass: String!, identityUuid: String!, reward: String!): BattlepassRewardClaim
	updateBattlepass(battlepass: String!, joinable: Boolean, freePasses: Int, premiumPasses: Int): Battlepass
	provideUserToken(identityUuid: String!, source: Source!, token: String!): BattlepassIdentity
}
